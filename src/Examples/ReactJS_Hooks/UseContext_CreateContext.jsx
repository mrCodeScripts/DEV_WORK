import { createContext, useContext } from "react";

const TheContext = createContext();

function ContextParentExample({ children }) {
  const val = {
    username: "John Doe",
    age: 19,
    gender: "Male",
  };

  return (
    <>
      <TheContext.Provider value={val}>{children}</TheContext.Provider>
    </>
  );
}

function useTheContext() {
  return useContext(TheContext);
}

function ContextChildExample() {
  const useContext = useTheContext();

  return (
    <>
      <div>
        <p>Personal Informations:</p>
        <p>
          <span>Username: {useContext.username}</span>
        </p>
        <p>
          <span>Age: {useContext.age}</span>
        </p>
        <p>
          <span>Gender: {useContext.gender}</span>
        </p>
      </div>
    </>
  );
}

export function TryUseContext() {
  return (
    <>
      <ContextParentExample>
        <ContextChildExample></ContextChildExample>
      </ContextParentExample>
    </>
  );
}

/*
-------------------------------------------------------------
üß† COMPLETE DESCRIPTION OF createContext() & useContext()
-------------------------------------------------------------

-------------------------------------------------------------
üîπ createContext()
-------------------------------------------------------------
- Purpose:
  Creates a Context object that allows data to be passed 
  through the component tree without manually passing props 
  at every level (avoids prop drilling).

- Syntax:
  const MyContext = createContext(defaultValue);

- Notes:
  ‚Ä¢ The `defaultValue` is only used if a component consumes 
    the context **without a Provider above it**.
  ‚Ä¢ Can hold any type of value: string, number, object, function, etc.
  ‚Ä¢ Typically used for **global-ish data**:
      - Themes (dark/light)
      - Sockets / live connections
      - Configs or global settings
      - Shared API state or flags

-------------------------------------------------------------
üîπ Context.Provider
-------------------------------------------------------------
- Purpose:
  Wraps children components and passes a value down the tree.
- Syntax:
  <MyContext.Provider value={someValue}>
    {children}
  </MyContext.Provider>

- Notes:
  ‚Ä¢ `{children}` is automatically passed from the parent component.
  ‚Ä¢ Any consuming child will **re-render automatically** if the `value` changes.
  ‚Ä¢ Avoid putting frequently changing values unless necessary ‚Äî can trigger multiple re-renders.

-------------------------------------------------------------
üîπ useContext()
-------------------------------------------------------------
- Purpose:
  Hook to **consume the context value** inside any child component
  without prop drilling.

- Syntax:
  const value = useContext(MyContext);

- Notes:
  ‚Ä¢ Must be used **inside a component wrapped by the Provider**.
  ‚Ä¢ Reading from context triggers re-render **only when the context value changes**.
  ‚Ä¢ Can wrap `useContext(MyContext)` inside a custom hook for cleaner usage:
      function useTheContext() { return useContext(MyContext); }

-------------------------------------------------------------
üîπ KEY INSIGHTS / BEST PRACTICES
-------------------------------------------------------------
1Ô∏è‚É£ useContext is best for **global-ish data**, not sensitive or per-component state.
2Ô∏è‚É£ It avoids passing props through many layers (‚Äúprop drilling‚Äù).
3Ô∏è‚É£ Changing the Provider‚Äôs value updates all consuming children automatically.
4Ô∏è‚É£ Can hold any data type (strings, objects, functions, arrays).
5Ô∏è‚É£ Combining with `useState` or `useReducer` in the Provider allows dynamic updates.

-------------------------------------------------------------
üîπ EXAMPLE:

const Context = createContext();

function ComponentExample({ children }) {
  const [person, setPerson] = useState("John Doe");

  return (
    <Context.Provider value={person}>
      {children}
    </Context.Provider>
  );
}

function useTheContext() {
  return useContext(Context);
}

function Child() {
  const aContext = useTheContext();
  return <p>{aContext}</p>;
}

-------------------------------------------------------------
üí° TL;DR SUMMARY
-------------------------------------------------------------
- createContext() ‚Üí creates a context object.
- Context.Provider ‚Üí wraps children and passes value.
- useContext() ‚Üí consumes the context value in any child.
- Ideal for global-ish state like themes, sockets, configs.
- Not recommended for component-specific or sensitive data.
-------------------------------------------------------------
*/

